#  RMIT University Vietnam
#  Course: COSC2767 Systems Deployment and Operations
#  Semester: 2024C
#  Assessment: Assignment 2
#  Author: Le Dinh Ngoc Quynh
#  ID: s3791159
#  Created  date: 10 Jan 2025
#  Last modified: 10 Jan 2025

AWSTemplateFormatVersion: "2010-09-09"

Description: "CloudFormation template to create an EKS cluster with multiple managed node groups and all public subnets."

Parameters:
  ClusterName:
    Type: String
    Default: MyEKSCluster
    Description: Name of the EKS cluster.

  FrontendNodeGroupName:
    Type: String
    Default: MyEKSFrontendNodeGroup
    Description: Name of the frontend EKS managed node group.

  BackendNodeGroupName:
    Type: String
    Default: MyEKSBackendNodeGroup
    Description: Name of the backend EKS managed node group.

  MiscNodeGroupName:
    Type: String
    Default: MyEKSMiscNodeGroup
    Description: Name of the misc EKS managed node group.

  NodeInstanceType:
    Type: String
    Default: t3.medium
    Description: EC2 instance type for the managed node groups.

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.

  VpcCidr:
    Type: String
    Default: 172.16.0.0/16
    Description: CIDR block for the VPC.

  RoleArn:
    Type: String
    Description: IAM Role ARN to use for the EKS cluster and node groups.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.16.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: kubernetes.io/cluster/MyEKSCluster
          Value: "owned"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.16.3.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: kubernetes.io/cluster/MyEKSCluster
          Value: "owned"

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.16.2.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: kubernetes.io/cluster/MyEKSCluster
          Value: "owned"

  PublicSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.16.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: "1"
        - Key: kubernetes.io/cluster/MyEKSCluster
          Value: "owned"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.16.5.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
        - Key: kubernetes.io/cluster/MyEKSCluster
          Value: "owned"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.16.6.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
        - Key: kubernetes.io/cluster/MyEKSCluster
          Value: "owned"

  PublicProxySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.16.7.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet4
      RouteTableId: !Ref PublicRouteTable

  PublicProxySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicProxySubnet
      RouteTableId: !Ref PublicRouteTable

  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0  # Allows all TCP ports
          ToPort: 65535
          CidrIp: 0.0.0.0/0


  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: !Ref RoleArn
      Version: "1.27"
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
          - !Ref PublicSubnet4
          - !Ref PublicProxySubnet
        SecurityGroupIds:
          - !Ref ClusterSecurityGroup
        EndpointPublicAccess: true
        EndpointPrivateAccess: false
        PublicAccessCidrs:
          - "0.0.0.0/0"
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: false

  VolabAccessEntry:
    Type: 'AWS::EKS::AccessEntry'
    DependsOn: EKSCluster
    Properties:
        ClusterName: !Ref ClusterName
        PrincipalArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/voclabs'  # Using AWS::AccountId pseudo parameter
        AccessPolicies:
            - PolicyArn: 'arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy'
              AccessScope:
                Type: 'cluster'
        Type: 'STANDARD'

#  MyAccessEntry:
#    Type: 'AWS::EKS::AccessEntry'
#    DependsOn: EKSCluster
#    Properties:
#        ClusterName: !Ref ClusterName
#        PrincipalArn: !Ref RoleArn
#        AccessPolicies:
#            - PolicyArn: 'arn:aws:eks::aws:cluster-access-policy/AmazonEKSAdminPolicy'
#              AccessScope:
#                Type: 'cluster'
#            - PolicyArn: 'arn:aws:eks::aws:cluster-access-policy/AmazonEKSEditPolicy'
#              AccessScope:
#                Type: 'cluster'
#            - PolicyArn: 'arn:aws:eks::aws:cluster-access-policy/AmazonEKSViewPolicy'
#              AccessScope:
#                Type: 'cluster'
#            - PolicyArn: 'arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy'
#              AccessScope:
#                Type: 'cluster'
#        Type: 'STANDARD'

  FrontendNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !Ref RoleArn
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
        - !Ref PublicSubnet4
        - !Ref PublicProxySubnet
      InstanceTypes:
        - !Ref NodeInstanceType
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 2
      NodegroupName: !Ref FrontendNodeGroupName

  BackendNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !Ref RoleArn
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
        - !Ref PublicSubnet4
        - !Ref PublicProxySubnet
      InstanceTypes:
        - !Ref NodeInstanceType
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 2
      NodegroupName: !Ref BackendNodeGroupName

  MiscNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !Ref RoleArn
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
        - !Ref PublicSubnet4
        - !Ref PublicProxySubnet
      InstanceTypes:
        - !Ref NodeInstanceType
      ScalingConfig:
        MinSize: 1
        MaxSize: 3
        DesiredSize: 2
      NodegroupName: !Ref MiscNodeGroupName

Outputs:
  ClusterName:
    Description: Name of the EKS cluster.
    Value: !Ref ClusterName

  ClusterEndpoint:
    Description: Endpoint for the EKS cluster.
    Value: !GetAtt EKSCluster.Endpoint
